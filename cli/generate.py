#!/usr/bin/env python3
"""
Service generator for the Microservice API Factory.

This script reads an idea specification from a JSON file and scaffolds a new
FastAPI service under the `services/` directory.  The idea JSON must contain
the fields `title` and `function`, and may include `sample_input` and
`sample_output` to guide the developer.  The generator creates a basic
`main.py`, `test_main.py`, `openapi.yaml`, and `README.md`, along with a
`requirements.txt`.  It also records the service in `logs/services.json`.
"""

import json
import os
import re
import sys
from pathlib import Path


def slugify(text: str) -> str:
    """Convert a string to a valid Python module name by replacing non‑alphanumerics."""
    slug = re.sub(r"[^a-z0-9]+", "_", text.lower()).strip("_")
    return slug or "service"


def create_service(idea_file: str) -> None:
    """Generate a new service from the provided idea file."""
    idea_path = Path(idea_file)
    if not idea_path.exists():
        print(f"Idea file not found: {idea_file}", file=sys.stderr)
        sys.exit(1)

    with idea_path.open() as f:
        idea = json.load(f)

    title = idea.get("title")
    if not title:
        print("The idea JSON must include a 'title' field.", file=sys.stderr)
        sys.exit(1)

    function_description = idea.get("function", "")
    sample_input = idea.get("sample_input", {})
    sample_output = idea.get("sample_output", {})

    slug = slugify(title)
    root = Path(__file__).resolve().parent.parent
    service_dir = root / "services" / slug
    if service_dir.exists():
        print(f"Service '{slug}' already exists at {service_dir}", file=sys.stderr)
        sys.exit(1)

    service_dir.mkdir(parents=True)

    # main.py template
    main_py = f""""""
This file was auto‑generated by the Microservice API Factory.

Update the data models and the endpoint logic to implement your service.
""""""
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

class Request(BaseModel):
    # TODO: define request schema based on sample_input
    pass

class Response(BaseModel):
    # TODO: define response schema based on sample_output
    pass

app = FastAPI(title="{title}")

@app.post('/generate', response_model=Response)
async def generate(req: Request) -> Response:
    """{function_description}"""
    # TODO: implement your service logic here
    raise HTTPException(status_code=501, detail='Not implemented')
"""

    # test_main.py template
    test_py = f""""""Unit tests for {title}""""""
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)


def test_generate_not_implemented():
    response = client.post('/generate', json={sample_input})
    assert response.status_code == 501
"""

    # README template
    readme_md = f"""# {title}\n\n{function_description}\n\n## Request\n\nReplace with the request schema.\n\n## Response\n\nReplace with the response schema.\n\n## Development Notes\n\nImplement your service logic in `main.py` and update this README accordingly.\n"""

    # openapi.yaml stub
    openapi_yaml = f"""openapi: 3.0.2\ninfo:\n  title: {title}\n  version: 1.0.0\npaths: {{}}\n"""

    # requirements.txt
    requirements = "fastapi\nuvicorn\npytest\n"

    # Write files
    (service_dir / "main.py").write_text(main_py)
    (service_dir / "test_main.py").write_text(test_py)
    (service_dir / "README.md").write_text(readme_md)
    (service_dir / "openapi.yaml").write_text(openapi_yaml)
    (service_dir / "requirements.txt").write_text(requirements)

    # Update logs
    logs_path = root / "logs" / "services.json"
    logs_path.parent.mkdir(exist_ok=True)
    try:
        services = json.loads(logs_path.read_text())
        if not isinstance(services, list):
            services = []
    except Exception:
        services = []
    services.append(slug)
    logs_path.write_text(json.dumps(services, indent=2))
    print(f"Created service '{slug}' in {service_dir}")


def main() -> None:
    if len(sys.argv) != 2:
        print("Usage: python generate.py <idea.json>")
        sys.exit(1)
    create_service(sys.argv[1])


if __name__ == "__main__":
    main()